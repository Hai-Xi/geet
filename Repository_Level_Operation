
use std::collections::HashMap;
use std::fs;
use std::io::{self, Write};
use chrono::Utc;

#[derive(Debug)]
pub enum RepoError {
    InitializationFailed(String),
    DirectoryExists(String),  
    CloneFailed(String),            // Error when cloning fails
    SyncFailed(String),             // Error when pull or push fails
}


// Struct for Repository and Commit (from previous examples)
pub struct Repository {
    pub name: String,
    pub path: String,
    pub remote_url: Option<String>,
    pub default_branch: String,
    pub files: HashMap<String, String>,// change accoring to file struct
    pub commits: Vec<Commit>,
    pub branches: HashMap<String, String>, // change accoring to branches struct
}

impl Repository {
    // Initializes a new repository
    pub fn init_repo(name: String, path: String, default_branch: String) -> Result<Self, RepoError> {
        // Check if the directory already exists to avoid conflicts
        if fs::metadata(&path).is_ok() {
            return Err(RepoError::DirectoryExists(format!(
                "Repository directory '{}' already exists.",
                path
            )));
        }

        // Attempt to create a directory for the repository
        fs::create_dir(&path).map_err(|e| {
            RepoError::InitializationFailed(format!("Failed to create directory: {}", e))
        })?;

        // Create the initial repository instance
        let mut repo = Repository {
            name: name.clone(),
            path: path.clone(),
            remote_url: None,
            default_branch: default_branch.clone(), // sync with whats being used in branch
            files: HashMap::new(), // sync with whats being used in file
            commits: Vec<Commit>(), // sync with commeits
            branches: HashMap::new(), // sync with whats being used in branch
        };

        // Create the initial commit
        let initial_commit_id = "initial_commit".to_string();
        let initial_commit = new_commit(
            initial_commit_id.clone(),
            "Initial commit".to_string(),
            "System".to_string(),
            Utc::now().to_rfc3339(),
            None, // No parent for the initial commit
        );

        // Add the initial commit to the repository's commit history
        repo.commits.push(initial_commit);


        // channge based on the branch
       // Set the branch to point to the initial commit
       repo.branches.insert(default_branch.clone(), initial_commit_id);

        
        // Write a log or metadata file to record initialization details, change based on file module
        let log_path = format!("{}/.repo_log", path);
        let mut log_file = fs::File::create(&log_path).map_err(|e| {
            RepoError::InitializationFailed(format!("Failed to create log file: {}", e))
        })?;
        writeln!(log_file, "Repository '{}' initialized at {}", name, Utc::now())
            .map_err(|e| RepoError::InitializationFailed(format!("Failed to write to log file: {}", e)))?;

        Ok(repo)
    }
}

